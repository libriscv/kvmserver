# Run with podman-compose (1.4.0):
# $ podman-compose build
# $ podman-compose up
# $ podman-compose down --volumes

# Run with docker compose:
# $ docker compose build
# $ KVM_GID=$(getent group kvm | cut -d: -f3) docker compose up
# $ docker compose down --volumes

name: kvmserver-demo
services:
  backend:
    build:
      context: .
      dockerfile_inline: |
        FROM debian:bookworm-slim
        COPY --from=denoland/deno:bin-2.4.1 /deno /usr/local/bin/
        COPY --from=ghcr.io/libriscv/kvmserver:bin /kvmserver /usr/local/bin/
    command:
      - /bin/bash
      - -c
      - |
        set -e;
        rm -f /sock/backend;
        umask 000;
        # TODO: kvmserver is causing stdout to be buffered
        exec kvmserver --allow-all --ephemeral --threads 2 --warmup 1000 -- deno run --allow-all \
          'data:,let i=0; Deno.serve({ path: "/sock/backend" }, () => new Response("Hello request " + (++i)))'
    devices:
      - /dev/kvm
    environment:
      - DENO_NO_UPDATE_CHECK=1
      - DENO_V8_FLAGS=--predictable,--stress-maglev,--prepare-always-turbofan,--always-turbofan,--always-sparkplug,--max-old-space-size=256,--max-semi-space-size=256
    group_add:
      # With docker we must supply the KVM_GID which varies per system:
      # $ KVM_GID=$(getent group kvm | cut -d: -f3) docker compose up
      # With rootless podman we must specify "keep-groups" (used as default here.)
      - "${KVM_GID:-keep-groups}"
    init: true  # necessary for ^C to work
    read_only: true
    volumes:
      - sock:/sock
  varnish:
    depends_on:
      - backend
    environment:
      - VARNISH_HTTP_PORT=8080
    image: varnish:7.7
    network_mode: host
    ports:
      - "8080:8080"
    volumes:
      - sock:/sock
      - $PWD/default.vcl:/etc/varnish/default.vcl:ro

volumes:
  # Ideally socket volume would be tmpfs but that cannot be shared between containers.
  sock:
